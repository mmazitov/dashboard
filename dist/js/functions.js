document.addEventListener("DOMContentLoaded",(()=>{initCharts()}));const initCharts=()=>{initChartRLQ(),initChartMZI(),initChartSurvey(),initChartKP(),initChartKI()},createChart=(t,e,a,r,n=[])=>new Chart(t,{type:e,data:a,options:r,plugins:n}),initChartRLQ=()=>{const t=document.getElementById("chart__area");if(!t)return;const e=getRLQData(),a=getRLQOptions();createChart(t,"line",e,a),styleChartArea(t,"0 0 10px 10px","rgba(241, 140, 92, 0.08)",136)},getRLQData=()=>({labels:Array(16).fill(""),datasets:[{label:"first",data:[50,47,44,42,42,44,46,47,45,43,39,36,35,35,36,40],fill:!0,borderWidth:0,tension:.4,backgroundColor:"rgba(241, 140, 92, 1)",pointRadius:0},{label:"second",data:[50,47,44,47,49,51,52,52,51,50,49,47,45,43,41,39],fill:!0,borderWidth:0,tension:.4,backgroundColor:"rgba(241, 140, 92, 0.32)",pointRadius:0}]}),getRLQOptions=()=>({plugins:{legend:{display:!1},annotation:{drawTime:"afterDatasetsDraw",annotations:createAnnotations(0,100,1,14,"#f0eae9",1)}},scales:createScales(0,100)}),createAnnotations=(t,e,a,r,n,i)=>{const o={};for(let t=0;t<4;t++){const l=e-(12+12*t);o[`line${t+1}`]={type:"line",yMin:l,yMax:l,xMin:a,xMax:r,borderColor:n,borderWidth:i}}return o},createScales=(t,e)=>({x:{ticks:{display:!1},grid:{display:!1},border:{display:!1}},y:{ticks:{display:!1},grid:{display:!1,drawTicks:!1},min:t,max:e,border:{display:!1}}}),styleChartArea=(t,e,a,r)=>{t.style.borderRadius=e,t.style.backgroundColor=a,t.height=r},initChartMZI=()=>{const t=document.getElementById("chart__doughnut--mzi");if(!t)return;const e=getMZIData(),a=getMZIOptions();createChart(t,"doughnut",e,a,[drawIconsPlugin()]),adjustChartHeight(t,10)},adjustChartHeight=(t,e)=>{const a=t.parentElement;if(!a)return;const r=a.clientHeight;t.height=r+e},getMZIData=()=>({labels:["Angry","Neutral","Happy"],datasets:[{data:[33.33,33.33,33.34],backgroundColor:Array(3).fill("rgba(217, 217, 217, 1)"),hoverBackgroundColor:Array(3).fill("rgba(217, 217, 217, 1)"),borderWidth:1,borderColor:"rgba(217, 217, 217, 1)",hoverBorderColor:"rgba(217, 217, 217, 1)"}]}),getMZIOptions=()=>({radius:"85%",cutout:"80%",circumference:220,rotation:250,responsive:!1,layout:{padding:{top:3}},plugins:{legend:{display:!1},tooltip:{enabled:!1}}}),drawIconsPlugin=()=>({id:"drawIcons",afterDraw:t=>{const e=t.ctx;e.save();t.getDatasetMeta(0).data.forEach(((t,a)=>{const{outerRadius:r,innerRadius:n}=t,i=(r+n)/2,o=calculateAngle(t,a),l=t.x+Math.cos(o)*i,s=t.y+Math.sin(o)*i;drawIcon(e,l,s,a)})),e.restore()}}),calculateAngle=(t,e)=>0===e?t.startAngle:2===e?t.endAngle:t.startAngle+(t.endAngle-t.startAngle)/2,drawIcon=(t,e,a,r)=>{t.globalAlpha=1,t.fillStyle="white",t.beginPath(),t.arc(e,a,16,0,2*Math.PI),t.fill(),t.lineWidth=4,t.strokeStyle="#fff",t.stroke(),t.font="24px Arial",t.textAlign="center",t.textBaseline="middle",t.fillStyle="black",t.fillText(["😡","😐","😀"][r],e,a),t.globalAlpha=1,t.fillStyle="rgba(255, 255, 255, 0.32)",t.beginPath(),t.arc(e,a,12,0,2*Math.PI),t.fill()},initChartSurvey=()=>{const t=document.getElementById("chart__bar--survey");if(!t)return;const e=getSurveyData(),a=getSurveyOptions();createChart(t,"bar",e,a)},getSurveyData=()=>({labels:Array.from({length:12},((t,e)=>String.fromCharCode(65+e))),datasets:[{data:[4.3,1.8,2.3,4.3,1.3,4.3,4.3,1.9,2.3,4.3,1.3,4.3],backgroundColor:["rgba(241, 140, 92, 1)"],borderWidth:0,barThickness:15,borderRadius:{topLeft:6,topRight:6,bottomRight:0,bottomLeft:0}}]}),getSurveyOptions=()=>({plugins:{legend:{display:!1}},scales:{y:{beginAtZero:!1,min:1,max:5,ticks:{stepSize:1,font:{family:"Inter",size:12},color:"rgba(97, 110, 133, 1)",padding:0,callback:t=>`${t}    `},grid:{drawTicks:!1},border:{display:!1}},x:{ticks:{font:{family:"Inter",size:12},color:"rgba(97, 110, 133, 1)"},grid:{display:!1}}}}),initChartKP=()=>{const t=document.getElementById("chart__bar--kp");if(!t)return;const e=getKPData(),a=getKPOptions();createChart(t,"bar",e,a).options.plugins.legend.onClick=()=>{}},getKPData=()=>({labels:["KP1","KP2","KP3","KP4","KP5"],datasets:[{label:"KP Value",data:[85,70,20,60,20],backgroundColor:["rgba(81, 85, 195, 1)","rgba(89, 125, 190, 1)","rgba(95, 153, 187, 1)","rgba(101, 184, 183, 1)","rgba(108, 221, 177, 1)"],borderWidth:0,barThickness:"flex",borderRadius:{topLeft:6,topRight:6,bottomRight:0,bottomLeft:0}}]}),getKPOptions=()=>({plugins:{legend:{display:!0,position:"bottom",labels:{font:{family:"Inter",size:12},color:"rgba(97, 110, 133, 1)",boxWidth:12,boxHeight:12,generateLabels:t=>generateLegendLabels(t)}}},layout:{margin:{bottom:5}},scales:{y:{beginAtZero:!0,min:0,max:100,ticks:{stepSize:25,font:{family:"Inter",size:12},color:"rgba(97, 110, 133, 1)",callback:t=>`${t}%     `},grid:{drawTicks:!1},border:{display:!1}},x:{ticks:{font:{family:"Inter",size:12},color:"rgba(97, 110, 133, 1)"},grid:{display:!1}}}}),generateLegendLabels=t=>{const e=t.data;return e.labels.length&&e.datasets.length?e.labels.map(((t,a)=>{const r=e.datasets[0];return{text:t,fillStyle:r.backgroundColor[a],hidden:!1,lineCap:"butt",lineDash:[],lineDashOffset:0,lineJoin:"miter",lineWidth:1,strokeStyle:r.backgroundColor[a],pointStyle:"rectRounded",borderRadius:4,rotation:0}})):[]},initChartKI=()=>{const t=document.querySelector(".chart__doughnut--ki"),e=t.querySelector(".chart__ki--outer"),a=t.querySelector(".chart__ki--inner"),r=210/39;for(let t=0;t<40;t++){const e=document.createElement("div");e.className="tick",e.style.transform=`rotate(${t*r}deg)`,a.appendChild(e)}const n=210/45;for(let t=0;t<46;t++){const a=document.createElement("div");a.className="tick",a.style.transform=`rotate(${t*n}deg)`,e.appendChild(a)}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
